package org.cryptomator.cryptofs;

import com.google.common.jimfs.Jimfs;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.FileSystem;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;

import static java.nio.file.StandardOpenOption.READ;
import static org.cryptomator.cryptofs.CryptoFileSystemProperties.cryptoFileSystemProperties;
import static org.cryptomator.cryptofs.CryptoFileSystemUri.create;

/**
 * @see <a href="https://github.com/cryptomator/cryptofs/issues/10">CryptoFS issue 10</a>
 */
public class WriteFileWhileReadonlyChannelIsOpenTest {

	private FileSystem inMemoryFs;
	private FileSystem fileSystem;
	private Path root;

	@BeforeEach
	public void setup() throws IOException {
		inMemoryFs = Jimfs.newFileSystem();
		Path pathToVault = inMemoryFs.getRootDirectories().iterator().next().resolve("vault");
		Files.createDirectory(pathToVault);
		fileSystem = new CryptoFileSystemProvider().newFileSystem(create(pathToVault), cryptoFileSystemProperties().withPassphrase("asd").build());
		root = fileSystem.getPath("/");
	}

	@AfterEach
	public void teardown() throws IOException {
		fileSystem.close();
		inMemoryFs.close();
	}

	@Test
	public void run() throws IOException {
		Path file = root.resolve("file");
		Files.write(file, "foo".getBytes());
		@SuppressWarnings("unused")
		FileChannel readOnlyChannel = FileChannel.open(file, READ);

		try (FileChannel writableChannel = FileChannel.open(file, StandardOpenOption.WRITE)) {
			ByteBuffer buffer = ByteBuffer.wrap("bar".getBytes());
			while (buffer.hasRemaining()) {
				writableChannel.write(buffer);
			}
		}
	}

}
